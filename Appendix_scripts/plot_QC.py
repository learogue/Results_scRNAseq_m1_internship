import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

Deng = [65.7, 71.1, 66.6, 70.4, 67.1, 69.5, 67.4, 68.6, 65.8, 70.2]
Chen=[63.4, 62.8, 52.4, 61.1, 60.1, 60.7, 60, 48.3, 47.9, 60, 59.6, 54.1, 54.1, 55.5, 55.3, 65.3, 59.9, 60.3, 51.4, 54.8, 40.9, 51.8, 56.9]
Mo =[64.2, 68.5, 71.6, 75.2, 78.3, 84.9, 82.5, 79.9, 74.7, 78.0, 77.6, 82.1, 73.9, 79.8, 74.0, 72.2, 71.0, 72.7, 72.0, 80.4, 76.9, 71.7, 74.4, 72.2, 78.1, 69.0, 76.6, 69.8, 70.2, 76.8, 76.3, 74.4, 77.4, 77.6, 79.0, 81.8, 78.0, 81.1, 77.4, 69.8, 75.1, 76.2, 84.9, 76.7, 74.2, 77.4, 77.6, 78.6, 75.2, 78.7, 76.1, 74.5, 77.3, 78.2, 80.1, 77.6, 76.5, 75.6, 75.9, 79.5, 75.4, 71.1, 76.3, 74.8, 82.6, 75.5, 72.0, 74.8, 74.9, 76.9, 77.4, 74.6, 78.0, 74.6, 71.2, 77.9, 76.7, 77.1, 78.2, 82.3, 78.0, 78.7, 74.0, 76.8, 74.2, 79.9, 77.2, 75.0, 78.9, 76.4, 65.0, 77.1, 77.5, 77.9, 79.6, 72.5, 72.6, 77.9,78.6, 76.9, 77.1,79.1, 79.3, 80.1, 74.2]
Nowo =[50.7, 50.0, 51.5, 50.7, 50.7, 50.0, 51.0, 50.3, 59.8, 59.0, 60.1, 59.3, 60.4, 59.6, 59.8, 59.0]
Posfai = [64.8, 62.1, 65.3, 61.4, 55.6, 56.9, 18.1, 62.5, 58.3, 66.3, 65.3, 64.0, 64.7, 60.0, 72.2, 62.3, 62.0, 69.2, 67.9, 69.8, 67.8, 68.2, 67.6, 66.5, 69.9, 65.9, 66.6, 61.7, 63.1, 66.8, 65.9, 66.8, 65.2, 67.3, 71.1, 67.3, 67.6, 70.6, 62.1, 69.2, 70.1, 68.8, 65.2, 58.1, 71.8, 56.9, 61.4, 60.1, 62.7, 66.8, 64.2, 66.0, 63.6, 58.8, 65.8, 67.0, 65.9, 64.1, 60.7, 61.7, 61.8, 66.0, 72.3, 65.9, 60.6, 68.9, 64.7, 65.0, 63.3, 70.5, 54.1, 55.4, 50.0, 62.0, 68.1, 62.9, 57.6, 60.2, 67.8]
Arg = [80.6, 80.5, 80.6, 81.0, 81.9, 81.2, 76.8, 81.6, 80.0, 80.9, 81.2, 80.3, 81.7, 79.5, 79.9, 75.0, 80.5, 82.0, 81.0, 79.8, 79.5, 80.8, 80.5, 81.6, 81.1, 81.6, 81.5, 81.6, 81.9, 81.9, 81.6, 82.6, 81.5, 82.2, 83.0, 82.2, 82.2, 80.7, 83.0, 84.6, 85.0, 85.3, 82.4, 85.2, 85.0, 81.4, 83.2, 82.2, 80.7, 84.7, 79.7, 82.3, 84.8, 80.5, 86.0, 85.9, 82.7, 82.6, 81.7, 84.6, 83.8, 83.5, 81.4, 82.3, 81.1, 84.0, 82.3, 84.9, 84.5, 85.8, 83.9, 82.7, 81.9, 86.7, 83.5, 81.4, 85.1, 82.1, 82.1, 86.2, 85.7, 84.9, 73.5, 85.0, 70.4, 84.9, 83.3, 81.7, 83.3, 82.3, 75.0, 81.8, 84.8, 81.5, 84.3, 77.2, 83.0, 85.5, 83.4, 80.5, 84.4, 84.4, 83.2, 81.3, 80.1, 81.5, 86.5, 80.9, 83.1, 82.3, 83.5, 85.4, 85.6, 80.4, 82.8, 80.5, 83.0, 85.0, 81.0, 78.2, 82.0, 85.0, 82.9, 83.4, 84.5, 83.8, 85.6, 85.5, 84.8, 84.3, 81.2, 84.9, 43.6]
Schu = [77.5, 77.6, 77.7, 79.7, 79.8, 79.4, 79.5, 79.6, 79.7, 79.7, 79.8, 78.5, 78.0, 78.5, 78.0, 78.7, 78.2, 78.5, 78.1, 78.0, 77.8, 77.9, 77.8, 78.1]

data = {
    "Deng": Deng,
    "Chen": Chen,
    "Mo": Mo,
    "Nowo": Nowo,
    "Posfai": Posfai,
    "Arg": Arg,
    "Schu": Schu
}

for dataset, val in data.items():
    if len(val) != 133:
        while len(val) != 133:
            val.append(np.nan)

# Convertir les données en un DataFrame long
df = pd.DataFrame(data)
df_long = df.melt(var_name='Dataset', value_name='uniquely mapped')
df_clean = df_long.dropna()

sns.boxplot(df_clean, x='Dataset', y='uniquely mapped', whis=[0, 100], width=.5, palette="Set2")
sns.stripplot(x='Dataset', y='uniquely mapped', data=df_clean, size=2, color=".3")

# Ajouter des titres et labels si nécessaire
plt.title('Percentages of reads uniquely mapped per dataset')
plt.xlabel('Dataset')
plt.ylabel('% uniquely mapped')

# Afficher le plot
plt.show()
